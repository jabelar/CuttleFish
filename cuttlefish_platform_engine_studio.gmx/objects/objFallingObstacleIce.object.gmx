<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMovableIce</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objParentFallingObstacle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// object will obey physics, so intialize related variables
state = STANDING ;
facing = LEFT ;
bounce = false ;
my_speed_factor = MOVABLE_SPEED_FACTOR ;
my_gravity_factor = 1 ;

dust_color = c_aqua ;

// movables can be breakables, and breakables may have treasure
breakable = false ;
contains_treasure = false ; // only make true if breakable also true
treasure_object_index = noone ;

// trigger variable for falling obstacles
fall_triggered = false ;

// initialize surrounding variables
character_is_over = NOTHING ;
character_is_above = NOTHING ;
character_is_below = NOTHING ;
character_is_right_of = NOTHING ;
character_is_left_of = NOTHING ;
platform_id = 0 ; // this is id for instance of a moving platform under character
vert_speed = 0; // this is used for better control than built-in vspeed
max_fall_speed = MAX_FALL_SPEED ; // may change this if equipped with something like parachutes
allow_parachute = false ;
parachute_deployed = false ;

// initial input variables, even though they won't really be used for physical objects
scrInitializeInputVariables() ;

// map sprites
// only possible states are standing and falling
sprite_standing = sprite_index ;
sprite_falling = sprite_index ;

// map sounds
sound_death = soundCrack ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// this alarm is used for delay after it is walked on before it starts to fall
// actual processing of the alarm occurs in the step event</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// this is done in begin step because want all obstacle movement complete before character movement
if fall_triggered then scrProcessPhysicalObjectStep() ;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not fall_triggered then // ready to be triggered
    {
    if place_meeting(x, y-1, objPlayer) then // player walking on top so trigger
        {
        alarm[0] = FALLING_OBSTACLE_DELAY * ROOM_SPEED ;
        }
    }

// check for alarm expiry exactly (don't use &lt;= because then will be triggered before alarm is set)
if alarm[0] =0 then fall_triggered = true ;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if alarm[0] &gt; 0 then
    {
    // shake the sprite to warn the player
    draw_sprite(sprite_index, image_index, x+choose(-1,0,1), y+choose(-1,0,1)) ;
    }
else
    {
    draw_sprite(sprite_index, image_index, x, y) ;
    }</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
