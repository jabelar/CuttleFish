<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>button_caption = "Players" ;
number_of_choices = 2 ;
choice[0] = "One" ;
choice[1] = "Two" ;
// initialize variables
current_choice = 0 ;
selected = false ;
// figure out hotkey based on first letter of the caption
hotkey = string_char_at(button_caption, 1) ;
// set font here because needs to be set prior to calling string_height() and string_width() functions
draw_set_font(fontComicSans28) ;
// button size should be based on largest string
var i ;
button_width = 0 ;
button_height = 0 ;
for (i=0; i&lt;number_of_choices; i+=1)
    {
    button_width = max(button_width, string_width(choice[i]) + 20) ;
    button_height = max(button_height, string_height(choice[i]) + 20) ;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// check for selection (based on mouse hovering, keys pressed, or joystick
selected = false ;
if mouse_x &gt; x then
    {
    if mouse_x &lt; x+button_width then
        {
        if mouse_y &gt; y then
            {
            if mouse_y &lt; y+button_height then selected = true ;
            }
        }
    }
// check for mouse press on button
if mouse_check_button_pressed(mb_left) then
    {
    // check if mouse clicked on button region
    if mouse_x &lt; x then break ;
    if mouse_x &gt; x+button_width then break ;
    if mouse_y &lt; y then break ;
    if mouse_y &gt; y+button_height then break ;
    current_choice += 1 ;
    if current_choice &gt;= number_of_choices then current_choice = 0 ;
    if current_choice = 0 then global.number_of_players = 1 else global.number_of_players = 2 ;
    }
// check for hotkey pressed
if keyboard_check_pressed(ord(hotkey)) then
    {
    current_choice += 1 ;
    if current_choice &gt;= number_of_choices then current_choice = 0 ;
    if current_choice = 0 then global.number_of_players = 1 else global.number_of_players = 2 ;
    }
// draw box
draw_set_color(c_dkgray) ;
draw_rectangle(x, y, x+button_width, y+button_height, false) ;
// highlight if selected
draw_set_color(c_yellow) ;
if selected then draw_rectangle(x, y, x+button_width, y+button_height, true) ;
// draw caption
draw_set_font(fontComicSans28) ;
draw_set_halign(fa_center) ;
draw_set_color(c_navy) ;
draw_text(x+button_width/2, y-string_height(button_caption)-10, button_caption) ;
// underline first letter of caption indicate keyboard shortcut
underline_width = string_width(hotkey) ;
underline_x = x+button_width/2-string_width(button_caption)/2
draw_line(underline_x, y-15, underline_x+underline_width, y-15) ;
// draw button text
if draw_set_color(c_white) ;
draw_text(x+button_width/2, y+10, choice[current_choice]) ;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_choice = 1 ;
global.number_of_players = 2 ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_choice = 0 ;
global.number_of_players = 1 ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
