<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMissPacmanStanding</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-900</depth>
  <persistent>0</persistent>
  <parentName>objParentCompanion</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_speed_factor = 1 ;
my_gravity_factor = 1 ;
my_original_gravity_factor = my_gravity_factor ;

state = STANDING ;
facing = RIGHT ;
xscale = 1 ; // use this instead of image_xscale to avoid flipping collision mask
yscale = 1 ;

// initialize line of sight variables, used in AI
last_seen_x = x ;
last_seen_y = y ;
bounce = false ;
running_enabled = true ; // no sonic style running
max_fall_speed = MAX_FALL_SPEED ; // may change this if equipped with something like parachutes
allow_parachute = true ;
parachute_deployed = false ;
shield_deployed = false ;
shield_strength = 100 ;
shield_use_rate = 100 / (room_speed * 2 ) ; //use up shield in 2 seconds
shield_regen_rate = 100 / (room_speed * 5 ) ; // full regen in 5 seconds
shield_min_regen = true ; // used to force wait between shield uses until regen'ed to min level
run_delay = RUN_DELAY * room_speed ; // time before continuous walking shifts to running
alarm[0] = -1 ; // alarm 0 is alarm for running
alarm[1] = room_speed * COMPANION_DECISION_FREQ ; // alarm 1 is used for AI decisions
trail_enabled = true ;

character_is_over = NOTHING ;
character_is_above = NOTHING ;
character_is_below = NOTHING ;
character_is_right_of = NOTHING ;
character_is_left_of = NOTHING ;

platform_id = 0 ; // this is id for instance of a moving platform under character
vert_speed = 0; // this is used for better control than built-in vspeed
diggable_left_id = noone ;
diggable_right_id = noone ;

// initialize AI motion control variables
scrInitializeInputVariables() ;

// map weapon objects
weapon_swinging = false ;
current_weapon_type = PLAYER_WEAPON_LASER ;
weapon_melee_object_index = objCompanionWeaponLightSaber ; // this is used when swinging 
weapon_melee_wield_sprite_index = sprMissPacmanWeaponLightSaber ; // this is used to make the character look like they're holding the weapon
weapon_projectile_object_index = objPlayerWeaponLaser ; // this what is actually shot out, like a bullet
weapon_projectile_wield_sprite_index = sprMissPacmanWeaponLaser ; // this is used to make character look like they're holding the weapon
weapon_bomb_object_index = objPlayerWeaponBomb ; // this is the actual bomb
weapon_bomb_wield_sprite_index = sprBlank ; // this is used to make the character look like they're holding the weapon

// map sprites
sprite_standing = sprMissPacmanStanding ;
sprite_walking = sprMissPacmanWalking ;
sprite_running = sprMissPacmanWalking ;
sprite_jumping = sprMissPacmanJumping ;
sprite_falling = sprMissPacmanJumping ;
sprite_ducking = sprMissPacmanDucking ;
sprite_climbing = sprMissPacmanStanding ;
sprite_jumping_powered = sprMissPacmanSuperJumpingPowered ;
sprite_super_jumping = sprMissPacmanJumping ;
sprite_double_jumping = sprMissPacmanJumping ;
sprite_dying = sprMissPacmanDying ;
sprite_shielding = sprMissPacmanShielding ;

// map sounds
sound_death = soundStomp ;

// set up decision alarm
alarm[0] = room_speed * COMPANION_DECISION_FREQ ;

// initialize sonic blur effect array
for (i=0; i&lt;TRAIL_SIZE; i+=1)
    {
    trail_x[i] = x ;
    trail_y[i] = y ;
    }</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// this alarm is for period between AI decisions
// reset alarm
alarm[1] = room_speed * COMPANION_DECISION_FREQ ;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = RUNNING ;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scrProcessCompanionStep</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objParentEnemy">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scrCollideWithEnemy</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objParentHazard">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scrCollideWithHazard</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw trail if enabled
if trail_enabled and (state = RUNNING or state = SUPER_JUMPING) then
    {
    for (i=0; i&lt;TRAIL_SIZE; i+=1)
        {
        draw_sprite_ext(sprite_index, image_index, trail_x[i], trail_y[i], xscale, yscale, 0, c_white, image_alpha*(TRAIL_SIZE-i)/TRAIL_SIZE) ;
        }
    }
else // no trail
    {
    draw_sprite_ext(sprite_index, image_index, x, y, xscale, yscale, 0, c_white, image_alpha) ;
    }
    
// draw parachute if deployed
if parachute_deployed then
    {
    draw_sprite_ext(sprParachute, 0, x, y - sprite_height, xscale, 1, 0, c_white, image_alpha) ;
    }
    
// draw weapon if appropriate
if current_weapon_type = PLAYER_WEAPON_LASER then
    {
    draw_sprite_ext(weapon_projectile_wield_sprite_index, 0, x, y, xscale, yscale, 0, c_white, image_alpha) ;
    }
if current_weapon_type = PLAYER_WEAPON_SWORD and not weapon_swinging then // will be drawn by weapon object when swinging
    {
    draw_sprite_ext(weapon_melee_wield_sprite_index, 0, x, y, xscale, yscale, 0, c_white, image_alpha) ;
    }
if current_weapon_type = PLAYER_WEAPON_BOMB then // will be drawn by weapon object when swinging
    {
    draw_sprite_ext(weapon_bomb_wield_sprite_index, 0, x, y, xscale, yscale, 0, c_white, image_alpha) ;
    }
    </string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
