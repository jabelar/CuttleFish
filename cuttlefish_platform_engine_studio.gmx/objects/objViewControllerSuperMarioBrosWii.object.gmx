<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// turn off cursor
window_set_cursor(cr_none) ;

// disable screen refresh until all view changes are made, to avoid glitchy look during transition
set_automatic_draw(false) ;
alarm[0] = 1 ; // set alarm to turn display refresh back on

// super mario bros is not widescreen, so constrain port to standard screen size
view_center = display_get_width() / 2 ;
view_height = display_get_height() ;
view_width = view_height * 600 / 480 ; // use proportion of standard screen
view_left = view_center - view_width / 2 ;

// set up the view port
view_xport[0] = view_left ;
view_yport[0] = 0 ;
view_hport[0] = view_height ;
view_wport[0] = view_width ;

// set up the view
view_xview[0] = 0 ;
view_yview[0] = room_height - 1008 ;
view_hview[0] = 480 ;
view_wview[0] = 600 ;

// initialize parallax variables
previous_xview[0] = view_xview[0] ;
previous_yview[0] = view_yview[0] ;

// deactivate all enemies and platforms will be activated again in begin step as they come into view
// this makes sure enemies only become active when discovered, and platforms are where you expect them when they first come into view
// don't deactivate everything, or animations for questions blocks and such will be out of sync with each other
instance_deactivate_object(objParentEnemy) ;
instance_deactivate_object(objParentPlatform) ;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// this alarm is used to turn display refreshing back on after initial setup
set_automatic_draw(true) ;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_activate_region(view_xview[0]-32, view_yview[0]-32, view_wview[0]+64, view_hview[0]+64, true) ;

// all player weapons outside view are destroyed
with (objParentPlayerWeapon)
    {
    if x &lt; view_xview[0] or x &gt; view_xview[0] + view_wview[0] then instance_destroy() ;
    }
    
// all Mushroom 1Up outside view are destroyed
with (objMushroom1Up)
    {
    if x &lt; view_xview[0] or x &gt; view_xview[0] + view_wview[0] then instance_destroy() ;
    }

// all enemies to left of view are destroyed
// commented out, since I did not restrict the movement to left (wherease original game does)
// with (objParentEnemy)
//    {
//    if x &lt; view_xview[0] then instance_destroy() ;
//    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// handle case where Mario in bonus rooms below
if objPlayer.y &gt; room_height - 480 then // in bonus room
    {
    view_yview[0] = room_height - 480 ;
    background_color = c_black ;
    view_xview[0] = 1664 ;
    }
else // at or above surface
    {
    background_color = c_blue ;
    if objPlayer.x &lt; 300 then // in beginning of room
        {
        view_xview[0] = 0 ;
        }
    else if objPlayer.x &lt; room_width - 300 then // in middle of room so track player
        {
        view_xview[0] = objPlayer.x - 300 ;
        }
    else // near end of room
        {
        view_xview[0] = room_width - 600 ;
        }
    if objPlayer.y &lt; 544 then // track if flying or jumping high
        {
        view_yview[0] = objPlayer.y - 128 ;
        }
    else // don't track
        {
        view_yview[0] = room_height - (1412 - 896 + 480) ;
        }
    }
// process parallax
scrProcessParallaxHorizontalOnly(view_current) ;</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
