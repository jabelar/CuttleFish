<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrDeclareGlobals() ;
scrDefineOrderedConstants() ;
scrMapKeyboardConstants() ;
global.input_style = KEYBOARD ;
scrMapInput() ;

global.number_of_lives[PLAYER1] = 5 ;
global.number_of_lives[PLAYER2] = 5 ;
global.player_score[PLAYER1] = 0 ;
global.player_score[PLAYER2] = 0 ;
global.coins_collected[PLAYER1] = 0 ;
global.coins_collected[PLAYER2] = 0 ;
global.current_room[PLAYER1] = roomSuperMario_1_1 ;
global.current_room[PLAYER2] = roomSuperMario_1_1 ;

global.current_player = PLAYER1 ;
global.number_of_players = 1 ; // default to 1 player

global.game_style = GAME_STYLE_MENU ;
global.player_character_type = "Mario" ;
global.load_game = false ; // flag to indicate that load game has just been requested

scrGameSetStyle(global.game_style) ;
// initialize variables used for pausing game
paused = false ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_pause) then
    {
    // toggle pause
    if paused then scrUnpauseGame() else scrPauseGame() ;
    paused = not paused ;
    }</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set current player's room to current room
global.current_room[global.current_player] = room ;

// create other controllers as appropriate to the room
switch room
    {
    case roomSelectPlayer:
        {
        // set style
        global.game_style = GAME_STYLE_MENU ;
        scrGameSetStyle(global.game_style) ;
        break ;
        }
    case roomSuperMario_1_1:
        {
        // check if room start was due to loading a saved game
        if global.load_game then
            {
            // set style
            scrGameSetStyle(global.game_style) ;
            with objPlayer scrMapPlayerCharacter() ;
            // if timer not already running then set it
            global.initial_room_time = 3 * 60 * room_speed ; // 3 minutes
            if global.room_time &lt;= 0 then global.room_time = global.initial_room_time ;
            instance_create(x, y, objRoomTimerController) ;
            instance_create(x, y, objHUDControllerSuperMario) ;
            instance_create(x, y, objViewControllerSuperMario) ;
            instance_create(x, y, objCheatController) ;
            break ;
            }
        else
            {
            // set style
            global.game_style = GAME_STYLE_MARIO ;
            scrGameSetStyle(global.game_style) ;
            global.player_character_type = "Mario" ;
            with objPlayer scrMapPlayerCharacter() ;
            // if timer not already running then set it
            global.initial_room_time = 3 * 60 * room_speed ; // 3 minutes
            if global.room_time &lt;= 0 then global.room_time = global.initial_room_time ;
            instance_create(x, y, objRoomTimerController) ;
            instance_create(x, y, objHUDControllerSuperMario) ;
            instance_create(x, y, objViewControllerSuperMario) ;
            instance_create(x, y, objCheatController) ;
            break ;
            }
        }
    case roomSuperMarioBrosWii:
        {
        // check if room start was due to loading a saved game
        if global.load_game then
            {
            // set style
            scrGameSetStyle(global.game_style) ;
            with objPlayer scrMapPlayerCharacter() ;
            // if timer not already running then set it
            global.initial_room_time = 3 * 60 * room_speed ; // 3 minutes
            if global.room_time &lt;= 0 then global.room_time = global.initial_room_time ;
            instance_create(x, y, objRoomTimerController) ;
            instance_create(x, y, objHUDControllerSuperMario) ;
            instance_create(x, y, objViewControllerSuperMarioBrosWii) ;
            instance_create(x, y, objCheatController) ;
            break ;
            }
        else
            {
            // set style
            global.game_style = GAME_STYLE_MARIO ;
            scrGameSetStyle(global.game_style) ;
            global.player_character_type = "Mario" ;
            with objPlayer scrMapPlayerCharacter() ;
            // if timer not already running then set it
            global.initial_room_time = 3 * 60 * room_speed ; // 3 minutes
            if global.room_time &lt;= 0 then global.room_time = global.initial_room_time ;
            instance_create(x, y, objRoomTimerController) ;
            instance_create(x, y, objHUDControllerSuperMario) ;
            instance_create(x, y, objViewControllerSuperMarioBrosWii) ;
            instance_create(x, y, objCheatController) ;
            break ;
            }
        }
    case room145:
        {
        // check if room start was due to loading a saved game
        if global.load_game then
            {
            // set style
            scrGameSetStyle(global.game_style) ;
            with objPlayer scrMapPlayerCharacter() ;
            // if timer not already running then set it
            global.initial_room_time = 3 * 60 * room_speed ; // 3 minutes
            if global.room_time &lt;= 0 then global.room_time = global.initial_room_time ;
            instance_create(x, y, objRoomTimerController) ;
            instance_create(x, y, objHUDControllerJaden) ;
            instance_create(x, y, objViewControllerSuperMario) ;
            instance_create(x, y, objCheatController) ;
            break ;
            }
        else
            {
            // set style
            global.game_style = GAME_STYLE_MARIO ;
            scrGameSetStyle(global.game_style) ;
            global.player_character_type = "Mario" ;
            with objPlayer scrMapPlayerCharacter() ;
            // if timer not already running then set it
            global.initial_room_time = 3 * 60 * room_speed ; // 3 minutes
            if global.room_time &lt;= 0 then global.room_time = global.initial_room_time ;
            instance_create(x, y, objRoomTimerController) ;
            instance_create(x, y, objHUDControllerJaden) ;
            instance_create(x, y, objViewControllerSuperMario) ;
            instance_create(x, y, objCheatController) ;
            break ;
            }
        }
    case roomLodeRunner_1_1:
        {
        // set style
        global.game_style = GAME_STYLE_LODE_RUNNER ;
        scrGameSetStyle(global.game_style) ;
        global.player_character_type = "LodeRunner" ;
        with objPlayer scrMapPlayerCharacter() ;
        // if timer not already running then set it
        instance_create(x, y, objCheatController) ;
        break ;
        }
    case roomLodeRunner_1_2:
        {
        // set style
        global.game_style = GAME_STYLE_LODE_RUNNER ;
        scrGameSetStyle(global.game_style) ;
        global.player_character_type = "LodeRunner" ;
        with objPlayer scrMapPlayerCharacter() ;
        // if timer not already running then set it
        instance_create(x, y, objCheatController) ;
        break ;
        }
    default:
        {
        // set style
        global.game_style = GAME_STYLE_GENERAL ;
        scrGameSetStyle(global.game_style) ;
        // ALLOW_PARACHUTE = true ;
        global.player_character_type = "Pokey" ;
        with objPlayer scrMapPlayerCharacter() ;
        instance_create(x, y, objCheatController) ;
        break ;
        }
    }

// adjust room speed to user setting
room_speed = ROOM_SPEED ;

// start or restart background or intro music
sound_stop_all() ;
if global.background_music != NONE then // music assigned to play in background
    {
    // loop or not based on setting
    if global.background_music_loop then sound_loop(global.background_music) else sound_play(global.background_music) ;
    }

// this room start event happens after objects created, so rerun creation events for all non-persistent objects
// to ensure that style settings have propogated properly
with (all)
    {
    if not persistent then
        {
        event_perform(ev_create, 0) ;
        }
    }

// create respawn markers for all enemies if enabled
if ALLOW_ENEMY_RESPAWN then
    {
    with objParentEnemy
        {
        // create respawn marker and link with local variables
        respawn_id = instance_create(x, y, objRespawnMarker) ;
        respawn_id.enemy_id = id ;
        respawn_id.enemy_object_index = object_index ;
        }
    }</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_info() ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// this code process the game pausing
if paused then
    {
    draw_set_font(fontScore28) ;
    draw_set_halign(fa_center) ;
    draw_set_valign(fa_middle) ;
    draw_set_color(c_red) ;
    if view_enabled then
        {
        draw_text_ext_transformed(view_xview[0]+view_wview[0]/2, view_yview[0]+view_hview[0]/3, "PAUSED", 0, 1000, 4, 4, 0) ;
        }
    else
        {
        draw_text_ext_transformed(room_width/2, room_height/3, "PAUSED", 0, 1000, 4, 4, 0) ;
        }
    }</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scrSaveGame</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scrLoadGame</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
